# example pipeline for Polaris scans using the Bridge CLI
trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  - group: poc.polaris.synopsys.com
  - name: BRIDGE_POLARIS_APPLICATION_NAME
    value: 'chuckaude-$(Build.Repository.Name)'
  - name: BRIDGE_POLARIS_PROJECT_NAME
    value: '$(Build.Repository.Name)'
  - name: BRIDGE_POLARIS_ASSESSMENT_TYPES
    value: 'SAST,SCA'

steps:
- task: JavaToolInstaller@0
  displayName: 'Use Java 17'
  inputs:
    versionSpec: 17
    jdkArchitectureOption: x64
    jdkSourceOption: PreInstalled

- task: Maven@4
  displayName: 'Maven Build'
  inputs:
    options: '-B -DskipTests'

- bash: |
    curl -fLsS -o bridge.zip $BRIDGECLI_LINUX64 && unzip -qo -d $(Agent.TempDirectory) bridge.zip && rm -f bridge.zip
    $(Agent.TempDirectory)/synopsys-bridge --verbose --stage polaris
  env:
    BRIDGE_POLARIS_ACCESSTOKEN: $(BRIDGE_POLARIS_ACCESSTOKEN)
  displayName: 'Polaris Full Scan'
  condition: not(eq(variables['Build.Reason'], 'PullRequest'))

- bash: |
    curl -fLsS -o bridge.zip $BRIDGECLI_LINUX64 && unzip -qo -d $(Agent.TempDirectory) bridge.zip && rm -f bridge.zip
    $(Agent.TempDirectory)/synopsys-bridge --verbose --stage polaris \
      polaris.prcomment.enabled=true \
      azure.organization.name=chuckaude \
      azure.repository.name=$(Build.Repository.Name) \
      azure.project.name=$(Build.Repository.Name) \
      azure.repository.branch.name=$(System.PullRequest.SourceBranch) \
      azure.repository.pull.number=$(System.PullRequest.PullRequestId)
  env:
    BRIDGE_POLARIS_ACCESSTOKEN: $(BRIDGE_POLARIS_ACCESSTOKEN)
  displayName: 'Polaris PR Scan'
  condition: eq(variables['Build.Reason'], 'PullRequest')

- task: ArchiveFiles@2
  displayName: 'Copy Log Files'
  condition: succeededOrFailed()
  enabled: false
  inputs:
    rootFolderOrFile: .bridge
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/bridge-logs.zip'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Log Files'
  condition: succeededOrFailed()
  enabled: false
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'logs'
